@model List<Menu>
@{
    List<Menu> menuList = (List<Menu>)Model;
}
@*
<div class="collapse navbar-collapse affix" id="main-menu">
    <ul class="nav nav-pills nav-stacked">
        @foreach (var item in menuList.Select((v, i) => new { v, i })) {
            @AsMenuItem(item.v, item.i, menuList)
        }
    </ul>
</div>
*@
<div class="collapse navbar-collapse affix" id="main-menu">
    @foreach (var item in menuList.Select((v, i) => new { v, i })) {
        @AsMenuItem2(item.v, item.i, menuList)
    }
</div>
@helper AsActive(string url)
{
    var active = (Request.Path == url) ? "active" : string.Empty;
    @active
}

    @helper AsMenuItem(Menu menu, int idx, List<Menu> menuList)
{
    if (idx == 0 || menu.Category != menuList.ElementAt(idx - 1).Category) {
        if (!string.IsNullOrWhiteSpace(menu.Category)) {
            <li class="nav-header">@menu.Category</li>
        }
        <li class="@AsActive(menu.URL)"><a href="@menu.URL"><span class="@menu.Icon"></span> @menu.Name</a></li>
    }
    else {
        <li class="@AsActive(menu.URL)"><a href="@menu.URL"><span class="@menu.Icon"></span> @menu.Name</a></li>
    }
}

@helper AsMenuItem2(Menu menu, int idx, List<Menu> menuList)
{
    if (idx == 0 || menu.Category != menuList[idx - 1].Category) {
        @Html.Raw("<div class=\"list-group\" id=\"main-menu\">")
        <a class="list-group-item list-group-item-heading">@menu.Category</a>
    }
    <a href="@menu.URL" class="list-group-item @AsActive(menu.URL)">
        <span class="@menu.Icon"></span>
        @menu.Name
    </a>
    if (idx == menuList.Count -1 ||
            (idx + 1) < menuList.Count && menu.Category != menuList[idx + 1].Category) {
        @Html.Raw("</div>")
    }
}
